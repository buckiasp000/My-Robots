from sensor import SENSORfrom motor import MOTORimport pybullet as pimport pybullet_dataimport pyrosim.pyrosim as pyrosimimport constants as cfrom pyrosim.neuralNetwork import NEURAL_NETWORKimport osimport mathclass ROBOT:    def __init__(self,robotID,solutionID):        self.robot = robotID        self.solutionID = solutionID        self.nn = NEURAL_NETWORK("brain" + str(self.solutionID) + ".nndf")        os.system('rm brain' + str(self.solutionID) + ".nndf")            def Prepare_To_Sense(self):                self.sensors = {}        for linkName in pyrosim.linkNamesToIndices:            self.sensors[linkName] = SENSOR(linkName)                def Sense(self, timeStep):        replaced = False        for sensor in self.sensors:            self.sensors[sensor].GetValue(timeStep)                        if (not replaced):               self.sensors[sensor].values[0] = math.sin(timeStep)               replaced = True                def Prepare_To_Act(self):        self.motors = {}        for jointName in pyrosim.jointNamesToIndices:            self.motors[jointName] = MOTOR(jointName)                def Act(self, timeStep):        for neuronName in self.nn.Get_Neuron_Names():            if self.nn.Is_Motor_Neuron(neuronName):                jointName = self.nn.Get_Motor_Neurons_Joint(neuronName)                desiredAngle = self.nn.Get_Value_Of(neuronName) * c.motorJointRange                self.motors[jointName].SetValue(self.robot,desiredAngle, timeStep)                def Think(self):        self.nn.Update()        self.nn.Print()            def Get_Fitness(self):        basePositionAndOrientation = p.getBasePositionAndOrientation(self.robot)        basePosition = basePositionAndOrientation[0]        xPosition = basePosition[0]                f = open("tmp" + str(self.solutionID) +".txt", "w")        f.write(str(xPosition))        f.close()        os.system("mv tmp" + str(self.solutionID) + ".txt fitness" + str(self.solutionID) +".txt")