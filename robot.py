from sensor import SENSORfrom motor import MOTORimport pybullet as pimport pybullet_dataimport pyrosim.pyrosim as pyrosimimport constants as cfrom pyrosim.neuralNetwork import NEURAL_NETWORKimport osclass ROBOT:    def __init__(self,robotID,solutionID):        self.robot = robotID        self.solutionID = solutionID        self.nn = NEURAL_NETWORK("brain" + str(self.solutionID) + ".nndf")        self.totalHeight = 0        self.sensorFitValue = 0        os.system('rm brain' + str(self.solutionID) + ".nndf")            def Prepare_To_Sense(self):        self.sensors = {}        for linkName in pyrosim.linkNamesToIndices:            self.sensors[linkName] = SENSOR(linkName)                def Sense(self, timeStep):        for sensor in self.sensors:            self.sensors[sensor].GetValue(timeStep)                def Prepare_To_Act(self):        self.motors = {}        for jointName in pyrosim.jointNamesToIndices:            self.motors[jointName] = MOTOR(jointName)                def Act(self, timeStep):        for neuronName in self.nn.Get_Neuron_Names():            if self.nn.Is_Motor_Neuron(neuronName):                jointName = self.nn.Get_Motor_Neurons_Joint(neuronName)                desiredAngle = self.nn.Get_Value_Of(neuronName) * c.motorJointRange                self.motors[jointName].SetValue(self.robot,desiredAngle, timeStep)                def Think(self):        self.nn.Update()        self.nn.Print()        def CalculateFitness(self, timeStep):        stateOfLinkZero = p.getLinkState(self.robot,0)        positionOfLinkZero = stateOfLinkZero[0]        zCoordinateOfLinkZero = positionOfLinkZero[2]                self.totalHeight = self.totalHeight + (zCoordinateOfLinkZero /80)                for sensor in self.sensors:            if(sensor[len(sensor)-1] == "0"):                self.sensorFitValue = (self.sensorFitValue + (self.sensors[sensor].values[timeStep-1]))            if(sensor[len(sensor)-1] == str(c.numSegments - 1)):                self.sensorFitValue = (self.sensorFitValue - (self.sensors[sensor].values[timeStep-1]))            #else:               # self.sensorFitValue = (self.sensorFitValue + self.sensors[sensor].values[timeStep-1])/c.numSegments            def Get_Fitness(self):                f = open("tmp" + str(self.solutionID) +".txt", "w")        f.write(str((self.sensorFitValue + self.totalHeight) /  c.iterations))        f.close()        os.system("mv tmp" + str(self.solutionID) + ".txt fitness" + str(self.solutionID) +".txt")